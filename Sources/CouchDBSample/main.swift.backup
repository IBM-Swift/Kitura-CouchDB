//
//  main.swift
//  PhoenixCouchDB
//  Sample code
//
//  Authors: Ricardo Olivieri
//  Copyright Â© 2016 IBM. All rights reserved.
//

import Foundation
import SwiftyJSON
import CouchDB

print("Starting sample program...")

// Connection properties for testing Cloudant or CouchDB instance
let connProperties = ConnectionProperties(hostName: "fee33f3a-cdbc-4c9b-bf9a-f1541ee68c06-bluemix.cloudant.com",
  port: 80, secured: false,
  userName: "fee33f3a-cdbc-4c9b-bf9a-f1541ee68c06-bluemix",
  password: "2e2c5dc953727c763ff19b1ff399bd8b97ef5e3d7c249e55879eb849deafe374")

let connPropertiesStr = connProperties.toString()
print("connPropertiesStr:\n\(connPropertiesStr)")

// Create couchDBClient instance using conn properties
let couchDBClient = CouchDBClient(connectionProperties: connProperties)
print("Hostname is: \(couchDBClient.connProperties.hostName)")

// Create database instance to perform any document operations
let database = couchDBClient.database("phoenix_db")

// Document ID
let documentId = "123456"

// JSON document in string format
let jsonStr =
  "{" +
    "\"_id\": \"\(documentId)\"," +
    "\"coordinates\": null," +
    "\"truncated\": false," +
    "\"created_at\": \"Tue Aug 28 21:16:23 +0000 2012\"," +
    "\"favorited\": false," +
    "\"string\": \"240558470661799936\"" +
  "}"

// Convert JSON string to NSData
let jsonData = jsonStr.dataUsingEncoding(NSUTF8StringEncoding)
// Convert NSData to JSON object
let json = JSON(data: jsonData!)

func chainer(document: JSON?, next: (revisionNumber: String) -> Void) {
  if let revisionNumber = document!["rev"].string {
    print("revisionNumber is \(revisionNumber)")
    next(revisionNumber: revisionNumber)
  } else {
    print("Oops something went wrong... could not get revisionNumber!")
  }
}

//Delete document
func deleteDocument(revisionNumber: String) {
  database.delete(documentId, rev: revisionNumber, failOnNotFound: false, callback: { (error: NSError?) in
    if (error != nil) {
      print("Oops something went wrong; could not delete document.")
      print(error!.code)
      print(error!.domain)
      print(error!.userInfo)
    } else {
      print("The document with ID \(documentId) was successfully deleted.")
    }
  })
}

//Update document
func updateDocument(revisionNumber: String) {
  database.update(documentId, rev: revisionNumber, document: json, callback: { (rev: String?, document: JSON?, error: NSError?) in
    if (error != nil) {
      print("Oops something went wrong; could not update document.")
      print(error!.code)
      print(error!.domain)
      print(error!.userInfo)
    } else {
      print("The document with ID \(documentId) was successfully updated.")
      print("This is the updated JSON document:\n\t\(document)")
      chainer(document!, next: deleteDocument)
    }
  })
}

//Read document
func readDocument() {
  database.retrieve(documentId, connProperties: connProperties, callback: { (document: JSON?, error: NSError?) in
    if (error != nil) {
      print("Oops something went wrong; could not read document.")
      print(error!.code)
      print(error!.domain)
      print(error!.userInfo)
    } else {
      print("Here is the JSON document read from CouchDB for ID \(documentId):\n\t\(document)")
      chainer(document!, next: updateDocument)
    }
  })
}

//Create document closure
func createDocument() {
  database.create(json, connProperties: connProperties, callback: { (id: String?, rev: String?, document: JSON?, error: NSError?) in
    if (error != nil) {
      print("Oops something went wrong; could not persist document.")
      print(error!.code)
      print(error!.domain)
      print(error!.userInfo)
    } else {
      print("Here is the JSON document that we just wrote to CouchDB:\n\t\(document)")
      //readDocument()
    }
  })
}

// Start tests...
createDocument();

print("Sample program completed its execution.")

/*
// Read existing document
database.retrieve("93868ba2bbea73154974a72eb3ef7144", connProperties: connProperties, callback: { (document: JSON?, error: NSError?) in
  if (error != nil) {
    print("Oops something went wrong; could not read document.")
    print(error!.code)
    print(error!.domain)
    print(error!.userInfo)
  } else {
    print("Here is the JSON document returned from CouchDB:\n\t\(document)")
  }
})
*/

/*
database.create(json, connProperties: connProperties, callback: { (id: String?, rev: String?, document: JSON?, error: NSError?) in
  if (error != nil) {
    print("Oops something went wrong; could not persist document.")
    print(error!.code)
    print(error!.domain)
    print(error!.userInfo)
  } else {
    print("Here is the JSON document that we just wrote to CouchDB:\n\t\(document)")
  }
})

*/
